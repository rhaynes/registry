
// Copy/paste from the stripe admin interface
var apiKey = Const.stripePrivateKey;

var stripe = require('stripe')(apiKey);
var Fiber = require('fibers');

exports.apiKey = apiKey;

// Because node-stripe exposes an API with a common format, we can automate
// the conversion to a fiber-compatibile library. wrapMethod will be called
// by the for loop at the bottom of this script to clone all the methods from
// the node-stripe. The reason we don't do this directly in the loop isn't just
// readability, we need obj and method to have their own references in memory
// in order for the closure starting at the line "return function() {" to
// reference the appropriate methods
function wrapMethod(obj,method) {
  return function() {
    // Copy all the arguments over
    var args = [];
    for (var i in arguments) {
      args.push(arguments[i]);
    }

    // Lowercase "fiber" will now reference the currently running fiber
    var fiber = Fiber.current;
    var E, Res = null;

    // Assign the callback
    args.push(function(err,res) {
      E = err;
      Res = res;

      fiber.resume();
    });

    // Call original node-stripe function with the new set of args
    method.apply(obj,args);

    Fiber.yield();
    if (!E) return Res
    else throw new Error(JSON.stringify(E));
  }
}

// This loop isn't inside any functions so it will be called once when node
// starts as soon as require('registry/stripe') is called.
for (var k in stripe) {
  // Create necessary exports objects (i.e., charges, customers, etc)
  exports[k] = {};

  // Loop through all the methods on each object and wrap with the previous method
  for (var j in stripe[k]) {
    exports[k][j] = wrapMethod(stripe[k],stripe[k][j]);
  }
}

